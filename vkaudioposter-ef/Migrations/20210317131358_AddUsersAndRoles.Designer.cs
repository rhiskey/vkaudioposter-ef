// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vkaudioposter_ef;

namespace vkaudioposter_ef.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20210317131358_AddUsersAndRoles")]
    partial class AddUsersAndRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("vkaudioposter_ef.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("vkaudioposter_ef.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.ConsolePhotostock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("console_Photostocks");

                    b
                        .HasComment("URL list of photostocks");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Mood")
                        .HasColumnType("int");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Playlist_ID")
                        .HasComment("Spotify URI");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Playlist_Name")
                        .HasComment("Name of playlist");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlaylistName" }, "Playlist_Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.PostedTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("MediaId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Trackname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("Trackname")
                        .IsUnique();

                    b.ToTable("PostedTracks");

                    b
                        .HasComment("Published tracks info");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.UnfoundTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Trackname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("trackname");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("Trackname")
                        .IsUnique();

                    b.ToTable("UnfoundTracks");
                });

            modelBuilder.Entity("vkaudioposter_ef.Model.Role", b =>
                {
                    b.HasOne("vkaudioposter_ef.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.PostedTrack", b =>
                {
                    b.HasOne("vkaudioposter_ef.parser.Playlist", "Playlist")
                        .WithMany("PostedTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.UnfoundTrack", b =>
                {
                    b.HasOne("vkaudioposter_ef.parser.Playlist", "Playlist")
                        .WithMany("UnfoundTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("vkaudioposter_ef.Model.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("vkaudioposter_ef.parser.Playlist", b =>
                {
                    b.Navigation("PostedTracks");

                    b.Navigation("UnfoundTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
